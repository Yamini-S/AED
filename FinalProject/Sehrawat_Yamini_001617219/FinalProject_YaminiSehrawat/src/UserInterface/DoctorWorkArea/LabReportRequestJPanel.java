/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.DoctorWorkArea;

import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.Patient.Patient;
import Business.PatientHealthRecord.PatientVitalSign;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.PatientLabWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author PC
 */
public class LabReportRequestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form LabReportRequestJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Patient patient;
    private Enterprise enterprise;
    private PatientLabWorkRequest patientLabRequest;
    private Date reportDate;
    public LabReportRequestJPanel(JPanel upc, Patient p, UserAccount ua, Enterprise ep) {
        initComponents();
        
        this.userProcessContainer = upc;
        this.userAccount = ua;
        this.patient = p;
        this.enterprise = ep;
        populatePatientLabRequestTable();
        populateVitalSignTable();
        
    }
    
    private void populatePatientLabRequestTable(){
        DefaultTableModel model = (DefaultTableModel) patientLabTable.getModel();
        model.setRowCount(0);
        
        for (WorkRequest workRequest : patient.getWorkQueue().getWorkRequestList()) {
            if (workRequest instanceof PatientLabWorkRequest) {
                patientLabRequest = (PatientLabWorkRequest) workRequest;
                Object[] row = new Object[7];
                row[0] = patientLabRequest.getRequestID();
                row[1] = patient.getPatientId();
                row[2] = patient.getName();
                row[3] = patientLabRequest.getMessage();
                row[4] = patientLabRequest.getReceiver() == null ? ("N/A") : patientLabRequest.getReceiver().getPerson().getName();
                row[5] = patientLabRequest == null ? ("N/A") : patientLabRequest;
                row[6] = patientLabRequest.getTimeStamp();
                model.addRow(row);
            }
        }
    }
    
    private void populateVitalSignTable(){
        DefaultTableModel model = (DefaultTableModel) patientVitalSignTable.getModel();
        model.setRowCount(0);
        if(patientLabRequest == null){
            return;
        }
        
        for(WorkRequest wRequest:patientLabRequest.getPatient().getWorkQueue().getWorkRequestList()){
            if(wRequest instanceof LabTestWorkRequest){
                LabTestWorkRequest labRequest = (LabTestWorkRequest) wRequest;
                Object[] row = new Object[7];
                row[0] = labRequest.getRequestID();
                row[1] = labRequest.getBloodPressure();
                row[2] = labRequest.getRespRate();
                row[3] = labRequest.gethRate();
                row[4] = labRequest.getPulseRate();
                row[5] = labRequest.getWeight();
                row[6] = labRequest.getTimeStamp();
                model.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientLabTable = new javax.swing.JTable();
        refreshBtn = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        requestReportBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        patientVitalSignTable = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 204, 204));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabel1.setText("Lab Report Panel");

        patientLabTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "RequestID", "Patient ID", "Patient Name", "Tests", "Receiver", "Status", "TimeStamp"
            }
        ));
        jScrollPane1.setViewportView(patientLabTable);

        refreshBtn.setBackground(new java.awt.Color(255, 153, 153));
        refreshBtn.setFont(new java.awt.Font("Tahoma", 3, 22)); // NOI18N
        refreshBtn.setText("Refresh");
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 153, 153));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 22)); // NOI18N
        jButton2.setText(">> Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        requestReportBtn.setBackground(new java.awt.Color(255, 153, 153));
        requestReportBtn.setFont(new java.awt.Font("Tahoma", 1, 22)); // NOI18N
        requestReportBtn.setText("Request Patient Report");
        requestReportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestReportBtnActionPerformed(evt);
            }
        });

        patientVitalSignTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request ID", "Blood Pressure", "Respiratory Rate", "Heart Rate", "Pulse Rate", "Weight", "Timestamp"
            }
        ));
        jScrollPane2.setViewportView(patientVitalSignTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(refreshBtn)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(510, 510, 510)
                            .addComponent(jLabel1))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(130, 130, 130)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1052, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(requestReportBtn))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1052, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel1)
                .addGap(34, 34, 34)
                .addComponent(refreshBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(requestReportBtn))
                .addGap(74, 74, 74)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(114, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void requestReportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestReportBtnActionPerformed
        reportDate = new Date();
        patientLabRequest = new PatientLabWorkRequest();
        patientLabRequest.setPatient(patient);
        patientLabRequest.setSender(userAccount);
        patientLabRequest.setTimeStamp(reportDate);
        patientLabRequest.setStatus("Report Sent");
        patientLabRequest.setMessage("Check Vitals");
        
        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (Organization.Type.Lab.getValue() == "Lab Organization") {
                org.getWorkQueue().getWorkRequestList().add(patientLabRequest);
            }
        }
        
        patient.getWorkQueue().getWorkRequestList().add(patientLabRequest);
        populatePatientLabRequestTable();
    }//GEN-LAST:event_requestReportBtnActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       userProcessContainer.remove(this);
        CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
        cardLayout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        populatePatientLabRequestTable();
        populateVitalSignTable();
    }//GEN-LAST:event_refreshBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable patientLabTable;
    private javax.swing.JTable patientVitalSignTable;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JButton requestReportBtn;
    // End of variables declaration//GEN-END:variables
}
