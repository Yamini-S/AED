/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.DoctorWorkArea;

import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.DoctorToDoctorRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author PC
 */


public class ReferToOtherDoctorJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ReferToOtherDoctorJPanel
     */
    
    private JPanel userProcessContainer;
    private Patient patient;
    private UserAccount userAccount;
    private Enterprise enterprise;
    private EcoSystem ecoSystem;
    private Date timeStamp;

    public ReferToOtherDoctorJPanel(JPanel upc,Patient p, UserAccount ua, Enterprise ep, EcoSystem es) {
        initComponents();
        
        this.userProcessContainer = upc;
        this.patient = p;
        this.userAccount = ua;
        this.enterprise = ep;
        this.ecoSystem = es;
        populatePlaceComboBox();
        populateReferToDoctorTable();
    }

    private void populatePlaceComboBox(){
        placeComboBox.removeAllItems();
        for(Network network:ecoSystem.getNetworkList()){
            placeComboBox.addItem(network);
        }
    }
    
    private void populateReferToDoctorTable(){
        DefaultTableModel model = (DefaultTableModel) referDoctorTable.getModel();
        model.setRowCount(0);
        
        for(WorkRequest workRequest : patient.getWorkQueue().getWorkRequestList()){
        if(workRequest instanceof DoctorToDoctorRequest){
        DoctorToDoctorRequest docRequest = (DoctorToDoctorRequest) workRequest;
        Object[] row = new Object[7];
        row[0] = docRequest.getMessage()== null? ("N/A") : docRequest.getMessage();
        row[1] = docRequest.getDoctorName();
        row[2] = docRequest.getDoctorId();
        row[3] = docRequest.getHospitalName();
        row[4] = docRequest.getPresentCity();
        row[5] = docRequest;
        row[6] = docRequest.getRequestDate();
        model.addRow(row);
        }
      }
    }    
        
    private void populateEnterpriseComboBox(Network network){
        enterpriseComboBox.removeAllItems();
        for (Enterprise enterprise1 : network.getEnterpriseDirectory().getEnterpriseList()) {
          //  if (enterprise1.getOrgId() == enterprise.getOrgId()) {
                if (enterprise1.getEnterpriseType().getValue().equals("Hospital")){
                    enterpriseComboBox.addItem(enterprise1);
                }
          //  }
        }
    }
    
    private void populateDoctorComboBox(Enterprise enterprise) {
        doctorComboBox.removeAllItems();
        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (org.getName().equals("Doctor Organization")) {
                for (Employee employee : org.getPersonDirectory().getEmployeeDirectory().getEmployeeList()) {
                    doctorComboBox.addItem(employee);
                }
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        referDoctorTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        placeComboBox = new javax.swing.JComboBox();
        enterpriseComboBox = new javax.swing.JComboBox();
        doctorComboBox = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        msgTextArea = new javax.swing.JTextArea();
        backBtn = new javax.swing.JButton();
        sendBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 204, 204));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabel1.setText("Refer To Doctor Panel");

        referDoctorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Refer To Doctor", "Doctor ID", "Enterprise", "Place", "Status", "Timestamp"
            }
        ));
        jScrollPane1.setViewportView(referDoctorTable);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setText("Place (city) :");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setText("Enterprise :");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setText("Doctor: ");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel5.setText("Message :");

        placeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        placeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                placeComboBoxActionPerformed(evt);
            }
        });

        enterpriseComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        enterpriseComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterpriseComboBoxActionPerformed(evt);
            }
        });

        doctorComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        msgTextArea.setColumns(20);
        msgTextArea.setRows(5);
        jScrollPane2.setViewportView(msgTextArea);

        backBtn.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        backBtn.setText(">> Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        sendBtn.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        sendBtn.setText("Send Request");
        sendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(433, 433, 433)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(205, 205, 205)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 891, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(469, 469, 469)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(backBtn)))
                        .addGap(163, 163, 163)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sendBtn)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(placeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(enterpriseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(doctorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(182, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(82, 82, 82)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(83, 83, 83)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(placeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(enterpriseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(doctorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(51, 51, 51)
                        .addComponent(jLabel3)
                        .addGap(60, 60, 60)
                        .addComponent(jLabel4)
                        .addGap(54, 54, 54)
                        .addComponent(jLabel5)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(backBtn)
                        .addGap(53, 53, 53))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(sendBtn)
                        .addContainerGap(82, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void placeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_placeComboBoxActionPerformed
        Network network = (Network) placeComboBox.getSelectedItem();
        if (network != null) {
            populateEnterpriseComboBox(network);
        }
    }//GEN-LAST:event_placeComboBoxActionPerformed

    private void enterpriseComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterpriseComboBoxActionPerformed
        Enterprise enterprise  = (Enterprise) enterpriseComboBox.getSelectedItem();
        if(enterprise != null){
            populateDoctorComboBox(enterprise);
        }
    }//GEN-LAST:event_enterpriseComboBoxActionPerformed

    private void sendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendBtnActionPerformed
        Employee employee = (Employee) doctorComboBox.getSelectedItem();
        String message = msgTextArea.getText().trim();
        if(employee.equals(null) || employee == null || message.equals("") || message == null){
            JOptionPane.showMessageDialog(null, "Please enter all info to send request");
            return;
        }
        timeStamp = new Date();
        DoctorToDoctorRequest request = new DoctorToDoctorRequest();
        request.setHospitalName(enterprise.getName());
        request.setHospitalId(enterprise.getEnterpriseId());
        request.setPatient(patient);
        request.setMessage(message);
        request.setSender(userAccount);
        request.setStatus("sent");
        request.setDoctorName(employee.getName());
        request.setDoctorId(employee.getPersonId());
        request.setPresentCity(enterprise.getAddress().getCity());
        request.setRequestDate(timeStamp);
        
        employee.getWorkQueue().getWorkRequestList().add(request);
        patient.getWorkQueue().getWorkRequestList().add(request);
        populateReferToDoctorTable();
    }//GEN-LAST:event_sendBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        userProcessContainer.remove(this);
        CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
        cardLayout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JComboBox doctorComboBox;
    private javax.swing.JComboBox enterpriseComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea msgTextArea;
    private javax.swing.JComboBox placeComboBox;
    private javax.swing.JTable referDoctorTable;
    private javax.swing.JButton sendBtn;
    // End of variables declaration//GEN-END:variables
}
