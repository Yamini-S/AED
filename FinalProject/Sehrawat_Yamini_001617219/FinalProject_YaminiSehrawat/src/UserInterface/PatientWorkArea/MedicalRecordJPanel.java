/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.PatientWorkArea;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Medication.Drug;
import Business.Organization.Organization;
import Business.Patient.Patient;
import Business.PatientHealthRecord.PatientVitalSign;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Date;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author PC
 */
public class MedicalRecordJPanel extends javax.swing.JPanel {

    /**
     * Creates new form MedicalRecordJPanel
     */
    private JPanel userProcessContainer;
    private EcoSystem ecoSystem;
    private UserAccount userAccount;
    private Enterprise enterprise;
    private Organization organization;
    private Patient patient;

    public MedicalRecordJPanel(JPanel upc, EcoSystem es, UserAccount ua, Organization org, Enterprise ep) {
        initComponents();

        this.userProcessContainer = upc;
        this.ecoSystem = es;
        this.userAccount = ua;
        this.organization = org;
        this.enterprise = ep;
        populatePatientData();
        populateVitalSignTable(null);
    }

    private void populatePatientData() {
        DefaultTableModel model = (DefaultTableModel) personelInfoTable.getModel();
        model.setRowCount(0);

        patient = (Patient) userAccount.getPerson();
        Object[] row = new Object[4];
        row[0] = patient.getPatientId();
        row[1] = patient;
        row[2] = patient.getAge();
        row[3] = patient.getGender();
        model.addRow(row);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        personelInfoTable = new javax.swing.JTable();
        backBtn = new javax.swing.JButton();
        medicalHistoryBtn = new javax.swing.JButton();
        displayBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        vitalSignTable = new javax.swing.JTable();
        refreshBtn = new javax.swing.JButton();
        viewDetailsBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        viewTrendBtn = new javax.swing.JButton();
        editVitalSignBtn = new javax.swing.JButton();
        autoCreateBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 204, 204));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabel1.setText("My Medical Record Panel");

        personelInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient ID", "Patient Name", "Age ", "Sex"
            }
        ));
        jScrollPane1.setViewportView(personelInfoTable);

        backBtn.setBackground(new java.awt.Color(255, 153, 153));
        backBtn.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        backBtn.setText(">> Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        medicalHistoryBtn.setBackground(new java.awt.Color(255, 153, 153));
        medicalHistoryBtn.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        medicalHistoryBtn.setText("Medical History");
        medicalHistoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                medicalHistoryBtnActionPerformed(evt);
            }
        });

        displayBtn.setFont(new java.awt.Font("Tahoma", 1, 23)); // NOI18N
        displayBtn.setText("Display Details ");
        displayBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayBtnActionPerformed(evt);
            }
        });

        vitalSignTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Timestamp", "Status", "Attendant Name", "Medication Required?", "VitalID"
            }
        ));
        jScrollPane2.setViewportView(vitalSignTable);

        refreshBtn.setFont(new java.awt.Font("Tahoma", 1, 23)); // NOI18N
        refreshBtn.setText("Refresh");
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });

        viewDetailsBtn.setFont(new java.awt.Font("Tahoma", 1, 23)); // NOI18N
        viewDetailsBtn.setText("View Details");
        viewDetailsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDetailsBtnActionPerformed(evt);
            }
        });

        deleteBtn.setFont(new java.awt.Font("Tahoma", 1, 23)); // NOI18N
        deleteBtn.setText("Delete ");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        viewTrendBtn.setFont(new java.awt.Font("Tahoma", 1, 23)); // NOI18N
        viewTrendBtn.setText("View Trend");
        viewTrendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewTrendBtnActionPerformed(evt);
            }
        });

        editVitalSignBtn.setFont(new java.awt.Font("Tahoma", 1, 23)); // NOI18N
        editVitalSignBtn.setText("Edit Vital Signs");
        editVitalSignBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editVitalSignBtnActionPerformed(evt);
            }
        });

        autoCreateBtn.setFont(new java.awt.Font("Tahoma", 1, 23)); // NOI18N
        autoCreateBtn.setText("Generate Vital Stats");
        autoCreateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoCreateBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(autoCreateBtn)
                        .addGap(514, 514, 514)
                        .addComponent(displayBtn))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(389, 389, 389)
                            .addComponent(jLabel1))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(53, 53, 53)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1091, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(44, 44, 44)
                            .addComponent(backBtn)
                            .addGap(641, 641, 641)
                            .addComponent(medicalHistoryBtn))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(83, 83, 83)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 947, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(editVitalSignBtn)
                                    .addGap(50, 50, 50)
                                    .addComponent(deleteBtn)
                                    .addGap(63, 63, 63)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(viewTrendBtn)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(viewDetailsBtn)
                                            .addGap(85, 85, 85)
                                            .addComponent(refreshBtn))))))))
                .addContainerGap(186, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addGap(41, 41, 41)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(displayBtn)
                    .addComponent(autoCreateBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 144, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refreshBtn)
                    .addComponent(viewDetailsBtn)
                    .addComponent(deleteBtn)
                    .addComponent(editVitalSignBtn))
                .addGap(29, 29, 29)
                .addComponent(viewTrendBtn)
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(medicalHistoryBtn)
                    .addComponent(backBtn))
                .addGap(34, 34, 34))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void medicalHistoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medicalHistoryBtnActionPerformed
        if (patient != null) {
            PatientMedicalHistoryJPanel panel = new PatientMedicalHistoryJPanel(userProcessContainer, patient, organization, userAccount);
            userProcessContainer.add("PatientMedicalHistoryJPanel", panel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
    }//GEN-LAST:event_medicalHistoryBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        userProcessContainer.remove(this);
        CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
        cardLayout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void displayBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayBtnActionPerformed
        int selectedRow = personelInfoTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.");
            return;
        }

        patient = (Patient) personelInfoTable.getValueAt(selectedRow, 1);
        if (patient != null) {
            populateVitalSignTable(patient);
        } else {
            JOptionPane.showMessageDialog(this, "No patient exists.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_displayBtnActionPerformed

    private void viewDetailsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDetailsBtnActionPerformed
        int selectedRow = vitalSignTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.", "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        PatientVitalSign vitalSign = (PatientVitalSign) vitalSignTable.getValueAt(selectedRow, 4);
        ViewDetailsJPanel panel = new ViewDetailsJPanel(userProcessContainer, vitalSign);
        userProcessContainer.add("ViewDetailsJPanel", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_viewDetailsBtnActionPerformed

    private void editVitalSignBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editVitalSignBtnActionPerformed
        int selectedRow = vitalSignTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.", "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        PatientVitalSign vitalSign = (PatientVitalSign) vitalSignTable.getValueAt(selectedRow, 4);
        ViewDetailsJPanel panel = new ViewDetailsJPanel(userProcessContainer, vitalSign);
        userProcessContainer.add("ViewDetailsJPanel", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_editVitalSignBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        int selectedRow = personelInfoTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.", "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        Patient patient = (Patient) personelInfoTable.getValueAt(selectedRow, 1);

        selectedRow = vitalSignTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table vitalSign Table.", "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        PatientVitalSign vitalSign = (PatientVitalSign) vitalSignTable.getValueAt(selectedRow, 4);
        int flag = JOptionPane.showConfirmDialog(this, "Are you sure want to remove?", "Warning", JOptionPane.YES_NO_OPTION);
        if (flag == 0) {
            patient.getPatientVitalSignHistory().deleteVitalSign(vitalSign);
            refreshVitalSign();
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        // TODO add your handling code here:
        refreshVitalSign();
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void viewTrendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewTrendBtnActionPerformed
        int selectedRow = vitalSignTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a patient from table.", "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        viewHealthGraph();
    }//GEN-LAST:event_viewTrendBtnActionPerformed

    private void autoCreateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoCreateBtnActionPerformed

        int selectedRow = personelInfoTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.", "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        Patient patient = (Patient) personelInfoTable.getValueAt(selectedRow, 1);
        if ((patient.getAge()>=1) && (patient.getAge()<=3)){
        Date date = new Date();
        System.out.println(date);
        Random random = new Random();
        int random1 = random.nextInt((14 - 10)+1) + 10;
        System.out.println("radom 1 is " + random1);
        int random2 = random.nextInt((30 - 20)+1) + 20;
        System.out.println("radom 2 is " + random2);
        int random3 = random.nextInt((130 - 80)+1) + 80;
        int random4 = random.nextInt((110 - 80)+1) + 80;
        int random5 = random.nextInt((100 - 80)+1) + 80;
        int random6 = random.nextInt((110 - 80)+1) + 80;
        PatientVitalSign pvs = setValueinVitalArray(random1, random2, random3, random4, random5, date);
        patient.getPatientVitalSignHistory().getPatientVitalSignList().add(pvs);
        }
        else if ((patient.getAge()>=3)&&(patient.getAge()<=5)){
        Date date = new Date();
        System.out.println(date);
        Random random = new Random();
        int random1 = random.nextInt((40 - 31)+1) + 31;
        System.out.println("radom 1 is " + random1);
        int random2 = random.nextInt((30 - 20)+1) + 20;
        System.out.println("radom 2 is " + random2);
        int random3 = random.nextInt((120 - 80)+1) + 80;
        int random4 = random.nextInt((100 - 60)+1) + 60;
        int random5 = random.nextInt((100 - 80)+1) + 80;
        PatientVitalSign pvs = setValueinVitalArray(random1, random2, random3, random4, random5, date);
        patient.getPatientVitalSignHistory().getPatientVitalSignList().add(pvs);
        }
        else if ((patient.getAge()>=6)&&(patient.getAge()<=12)){
        Date date = new Date();
        System.out.println(date);
        Random random = new Random();
        int random1 = random.nextInt((42 - 20)+1) + 20;
        System.out.println("radom 1 is " + random1);
        int random2 = random.nextInt((35 - 17)+1) + 17;
        System.out.println("radom 2 is " + random2);
        int random3 = random.nextInt((110 - 70)+1) + 70;
        int random4 = random.nextInt((100 - 60)+1) + 60;
        int random5 = random.nextInt((120 - 80)+1) + 80;
        PatientVitalSign pvs = setValueinVitalArray(random1, random2, random3, random4, random5, date);
        patient.getPatientVitalSignHistory().getPatientVitalSignList().add(pvs);
        }
        
        else if ((patient.getAge()>=13)){
        Date date = new Date();
        System.out.println(date);
        Random random = new Random();
        int random1 = random.nextInt((150 - 50)+1) + 50;
        System.out.println("random 1 is " + random1);
        int random2 = random.nextInt((22 - 10)+1) + 10;
        System.out.println("random 2 is " + random2);
        int random3 = random.nextInt((105 - 55)+1) + 55;
        int random4 = random.nextInt((100 - 60)+1) + 60;
        int random5 = random.nextInt((130 - 100)+1) + 100;
        PatientVitalSign pvs = setValueinVitalArray(random1, random2, random3, random4, random5, date);
        patient.getPatientVitalSignHistory().getPatientVitalSignList().add(pvs);
        }
        JOptionPane.showMessageDialog(null, "Vital stats generated successfully!");
    }//GEN-LAST:event_autoCreateBtnActionPerformed

    public PatientVitalSign setValueinVitalArray(int weignt, int respRate, int heartRate, int pulseRate, int bloodPress, Date time) {
        PatientVitalSign pvs = new PatientVitalSign();
        pvs.setBloodPressure(bloodPress);
        pvs.setPulseRate(pulseRate);
        pvs.setHeartRate(heartRate);
        pvs.setRespiratoryRate(respRate);
        pvs.setWeight(weignt);
        pvs.setTimestamp(time);
        pvs.setAttendantName(patient.getName());
        return pvs;
    }

    private void refreshVitalSign() {
        int selectedRow = personelInfoTable.getSelectedRow();
        if (selectedRow < 0) {
            populateVitalSignTable(null);
        } else {
            Patient patient = (Patient) personelInfoTable.getValueAt(selectedRow, 1);

            if (patient != null) {
                populateVitalSignTable(patient);
            } else {
                populateVitalSignTable(null);
            }
        }
    }

    public void populateVitalSignTable(Patient patient) {
        DefaultTableModel model = (DefaultTableModel) vitalSignTable.getModel();
        model.setRowCount(0);

        if (patient != null) {
            int patientAge = patient.getAge();
            ArrayList<PatientVitalSign> vitalSignList = patient.getPatientVitalSignHistory().getPatientVitalSignList();

            if (vitalSignList.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No vital signs found. Please add vital signs", "Error", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            for (PatientVitalSign vitalSign : vitalSignList) {
                Object[] row = new Object[5];
                row[0] = vitalSign.getTimestamp();
                row[1] = VitalSignStatus(patientAge, vitalSign);
                row[2] = patient.getName();
                if(row[1] == "Normal"){
                    row[3] = "NO medication required";
                }else{
                    row[3] = "Medication Required, please visit doctor!";
                }
                row[4] = vitalSign;
              model.addRow(row);
            }
        }
    }

    private String VitalSignStatus(int patientAge, PatientVitalSign vitalSign) {
        String vitalSignStatus = "Normal";
            

        int respiratoryRate = vitalSign.getRespiratoryRate();
        int heartRate = vitalSign.getHeartRate();
        int bloodPressure = vitalSign.getBloodPressure();
        float weight = vitalSign.getWeight();
        int pulseRate = vitalSign.getPulseRate();

        /* Age 1-3 years*/
        if (patientAge >= 1 && patientAge <= 3) {
            if ((respiratoryRate < 20 || respiratoryRate > 30) /*respiratoryRate */
                    || (heartRate < 80 || heartRate > 130) /*Heart Rate*/
                    || (bloodPressure < 80 || bloodPressure > 110) /*Blood Pressure*/
                    || (weight < 22 || weight > 31)) /*Weight*/ {
                vitalSignStatus = "Abnormal";
            }
        }
        /*Age 4-5 years*/
        if (patientAge >= 4 && patientAge <= 5) {
            if ((respiratoryRate < 20 || respiratoryRate > 30)
                    || (heartRate < 80 || heartRate > 120)
                    || (bloodPressure < 80 || bloodPressure > 110)
                    || (weight < 31 || weight > 40)) {
                vitalSignStatus = "Abnormal";
            }
        }
        /*Age 6-12 years*/
        if (patientAge >= 6 && patientAge <= 12) {
            if (respiratoryRate < 20 || respiratoryRate > 30){
                vitalSignStatus = "Abnormal";
                JOptionPane.showMessageDialog(this,"Respiratory rate is Abnormal, Please report to Doctor!", "Warning",JOptionPane.WARNING_MESSAGE);
            }else if(heartRate < 70 || heartRate > 110){
                vitalSignStatus = "Abnormal";
                JOptionPane.showMessageDialog(this,"Heart rate is Abnormal, Please report to Doctor!", "Warning",JOptionPane.WARNING_MESSAGE);
            }else if (bloodPressure < 80 || bloodPressure > 120){
                vitalSignStatus = "Abnormal";
                JOptionPane.showMessageDialog(this,"Blood Pressure is Abnormal, Please report to Doctor!", "Warning",JOptionPane.WARNING_MESSAGE);
            }else if(weight < 41 || weight > 92) {
                vitalSignStatus = "Abnormal";
                JOptionPane.showMessageDialog(this,"Weight Abnormal, Please report to Doctor!", "Warning",JOptionPane.WARNING_MESSAGE);
            }
        }
        /*Age >=13*/
        if (patientAge >= 13) {
            if (respiratoryRate < 12 && respiratoryRate > 20){
                vitalSignStatus = "Abnormal";
                JOptionPane.showMessageDialog(this,"Respiratory rate is Abnormal, Please report to Doctor!", "Warning",JOptionPane.WARNING_MESSAGE);
            }else if (heartRate < 55 && heartRate > 105){
                vitalSignStatus = "Abnormal";
                JOptionPane.showMessageDialog(this,"Heart rate Abnormal, Please report to Doctor!", "Warning",JOptionPane.WARNING_MESSAGE);
            }else if (bloodPressure < 110 && bloodPressure > 120){
                vitalSignStatus = "Abnormal";
                JOptionPane.showMessageDialog(this,"Blood Pressure status Abnormal, Please report to Doctor!", "Warning",JOptionPane.WARNING_MESSAGE);
            }else if (weight < 110) {
                vitalSignStatus = "Abnormal";
                JOptionPane.showMessageDialog(this,"Weight Abnormal, Please report to Doctor!", "Warning",JOptionPane.WARNING_MESSAGE);
            }
        }
        return vitalSignStatus;
    }

    private void viewHealthGraph() {
        DefaultCategoryDataset vitalSignDataset = new DefaultCategoryDataset();
        int selectedRow = personelInfoTable.getSelectedRow();
        Patient patient = (Patient) personelInfoTable.getValueAt(selectedRow, 1);
        if (patient == null) {
            JOptionPane.showMessageDialog(this, "Patient not created, Please create Patient first.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        ArrayList<PatientVitalSign> vitalSignList = patient.getPatientVitalSignHistory().getPatientVitalSignList();
        if (vitalSignList.isEmpty() || vitalSignList.size() == 1) {
            JOptionPane.showMessageDialog(this, "No vital signs or only one vital sign found. At least 2 vital sign records needed to show chart!", "Warning", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        for (PatientVitalSign vitalSign : vitalSignList) {
            vitalSignDataset.addValue(vitalSign.getRespiratoryRate(), "RespRate", vitalSign.getTimestamp());
            vitalSignDataset.addValue(vitalSign.getHeartRate(), "HeartRate", vitalSign.getTimestamp());
            vitalSignDataset.addValue(vitalSign.getPulseRate(), "PulseRate", vitalSign.getTimestamp());
            vitalSignDataset.addValue(vitalSign.getBloodPressure(), "BP", vitalSign.getTimestamp());
            vitalSignDataset.addValue(vitalSign.getWeight(), "Weight", vitalSign.getTimestamp());
        }

        JFreeChart vitalSignTrend = ChartFactory.createBarChart3D("Vital Sign Graph", "Timestamp", "Rate", vitalSignDataset, PlotOrientation.VERTICAL, true, false, false);
        vitalSignTrend.setBackgroundPaint(Color.white);
        CategoryPlot vitalSignPlot = vitalSignTrend.getCategoryPlot();
        vitalSignPlot.setBackgroundPaint(Color.lightGray);

        CategoryAxis vitalSignAxis = vitalSignPlot.getDomainAxis();
        vitalSignAxis.setCategoryLabelPositions(
                CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 6.0)
        );

        NumberAxis vitalSignNumberAxis = (NumberAxis) vitalSignPlot.getRangeAxis();
        vitalSignNumberAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

        ChartFrame chartFrame = new ChartFrame("Chart", vitalSignTrend);
        chartFrame.setVisible(true);
        chartFrame.setSize(600, 600);

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton autoCreateBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton displayBtn;
    private javax.swing.JButton editVitalSignBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton medicalHistoryBtn;
    private javax.swing.JTable personelInfoTable;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JButton viewDetailsBtn;
    private javax.swing.JButton viewTrendBtn;
    private javax.swing.JTable vitalSignTable;
    // End of variables declaration//GEN-END:variables
}
