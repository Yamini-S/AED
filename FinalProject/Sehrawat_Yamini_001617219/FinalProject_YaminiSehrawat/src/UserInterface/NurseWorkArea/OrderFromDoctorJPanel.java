/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.NurseWorkArea;

import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.DoctorToNurseRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author PC
 */
public class OrderFromDoctorJPanel extends javax.swing.JPanel {

    /**
     * Creates new form OrderFromDoctorJPanel
     */
    
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Organization organization;
    
    public OrderFromDoctorJPanel(JPanel upc, UserAccount ua, Organization o) {
        initComponents();
        
        this.userProcessContainer = upc;
        this.userAccount = ua;
        this.organization = o;
        populateDoctorOrderTable();
    }

    private void populateDoctorOrderTable(){
        DefaultTableModel model = (DefaultTableModel) doctorOrderTable.getModel();
        model.setRowCount(0);
        
        for (WorkRequest workRequest : organization.getWorkQueue().getWorkRequestList()) {
            if (workRequest instanceof DoctorToNurseRequest) {
                DoctorToNurseRequest nurseRequest = (DoctorToNurseRequest) workRequest;
                Object[] row = new Object[10];
                row[0] = nurseRequest.getRequestID();
                row[1] = nurseRequest.getPatient().getName();
                row[2] = nurseRequest.getInjection() == null? ("N/A") : nurseRequest.getInjection();
                row[3] = nurseRequest.getDosageLevel();
                row[4] = nurseRequest.getComplications()== null? ("N/A") : nurseRequest.getComplications();
                row[5] = nurseRequest.getSender().getPerson().getName();
                row[6] = nurseRequest.getReceiver() == null? ("N/A") : nurseRequest.getReceiver().getPerson().getName();
                row[7] = nurseRequest;
                row[8] = nurseRequest.getMessageDoc();
                row[9] = nurseRequest.getDate();
                model.addRow(row);
            }
        }        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        doctorOrderTable = new javax.swing.JTable();
        refreshBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        assignBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        injectionTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        dosageTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        comTextArea = new javax.swing.JTextArea();
        sendBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 204, 204));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabel1.setText("Treat Patient :Instruction From Doctor ");

        doctorOrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request ID", "Patient Name", "Injection Name", "Dosage", "Complication", "Sender", "Receiver", "Status", "Message", "Timestamp"
            }
        ));
        jScrollPane1.setViewportView(doctorOrderTable);

        refreshBtn.setBackground(new java.awt.Color(255, 153, 153));
        refreshBtn.setFont(new java.awt.Font("Tahoma", 3, 23)); // NOI18N
        refreshBtn.setText("Refresh");
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });

        backBtn.setBackground(new java.awt.Color(255, 153, 153));
        backBtn.setFont(new java.awt.Font("Tahoma", 1, 23)); // NOI18N
        backBtn.setText(">> Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        assignBtn.setBackground(new java.awt.Color(255, 153, 153));
        assignBtn.setFont(new java.awt.Font("Tahoma", 1, 23)); // NOI18N
        assignBtn.setText("Assign To Me");
        assignBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignBtnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 23)); // NOI18N
        jLabel2.setText("Injection : ");

        injectionTxt.setFont(new java.awt.Font("Tahoma", 0, 23)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 23)); // NOI18N
        jLabel3.setText("Dosage :");

        dosageTxt.setFont(new java.awt.Font("Tahoma", 0, 23)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 23)); // NOI18N
        jLabel4.setText("Complication :");

        comTextArea.setColumns(20);
        comTextArea.setRows(5);
        jScrollPane2.setViewportView(comTextArea);

        sendBtn.setBackground(new java.awt.Color(255, 153, 153));
        sendBtn.setFont(new java.awt.Font("Tahoma", 1, 23)); // NOI18N
        sendBtn.setText("Send Request");
        sendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(assignBtn)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(refreshBtn)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1237, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 37, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backBtn)
                        .addGap(254, 254, 254)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dosageTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(80, 80, 80)
                                    .addComponent(injectionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(sendBtn)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(262, 262, 262)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addComponent(refreshBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignBtn)
                    .addComponent(jLabel2)
                    .addComponent(injectionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(dosageTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(36, 424, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sendBtn)
                            .addComponent(backBtn))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignBtnActionPerformed
        int selectedRow = doctorOrderTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row to assign to you");
            return;
        }
        
        DoctorToNurseRequest request =  (DoctorToNurseRequest) doctorOrderTable.getValueAt(selectedRow, 7);
        
        if(request.getStatus().equals("Completed")){
            JOptionPane.showMessageDialog(null, "Patient request has already been sent.");
            return;
        }
        
        request.setReceiver(userAccount);
        request.setStatus("In-Progress");
        populateDoctorOrderTable();

        if(request.getReceiver() == null){
            JOptionPane.showMessageDialog(null, "Please assign the request to you first!");
            return;
        }
    }//GEN-LAST:event_assignBtnActionPerformed

    private void sendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendBtnActionPerformed
        int selectedRow = doctorOrderTable.getSelectedRow();
        if(selectedRow < 0) {
           JOptionPane.showMessageDialog(null, "Please select a row first ");
           return;
        }
        
        String inject = injectionTxt.getText().trim();
        String comp = comTextArea.getText().trim();
        int dosage;
        
        try{
            dosage = Integer.parseInt(dosageTxt.getText().trim());
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Please enter a valid integer value!");
            return;  
        }
        
         if (inject == null || inject.equals("")|| comp == null || dosage < 0) {
            JOptionPane.showMessageDialog(null, "Please enter all the details, fields cannot be empty!");
            return;
        }
         
        DoctorToNurseRequest request =  (DoctorToNurseRequest) doctorOrderTable.getValueAt(selectedRow, 7);
        
        if (request.getStatus().equals("sent")) {
            JOptionPane.showMessageDialog(null, "Please assign the patient request to you first!");
            return;                             
        }           
         if(request.getStatus().equals("Completed")){
             JOptionPane.showMessageDialog(null, "Patient data already sent!");
             return;
         } 
         
         request.setInjection(inject);
         request.setDosageLevel(dosage);
         request.setComplications(comp);
         request.setStatus("Completed");
         
        JOptionPane.showMessageDialog(null, "Patient data added and sent successfully!");
        populateDoctorOrderTable();
         
    }//GEN-LAST:event_sendBtnActionPerformed

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        populateDoctorOrderTable();
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        userProcessContainer.remove(this);
        CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
        cardLayout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JTextArea comTextArea;
    private javax.swing.JTable doctorOrderTable;
    private javax.swing.JTextField dosageTxt;
    private javax.swing.JTextField injectionTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JButton sendBtn;
    // End of variables declaration//GEN-END:variables
}
